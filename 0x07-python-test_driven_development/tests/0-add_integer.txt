
======================
0-add_integer.py Usage
======================

prototype: add_integer(a, b=98)
returns int(a) + int(b)
The function works with ints and floats (positive or negative)

::
    >>> add_integer = __import__('0-add_integer').add_integer
    >>> add_integer(2, 4)
    6

::
    >>> add_integer(2, -4)
    -2

::
    >>> add_integer(1.1, 2.0)
    3

::
    >>> add_integer(1.1, -2.0)
    -1

::
    >>> add_integer(-2.9, -0.6)
    -2

floats and ints can be combined.

::
    >>> add_integer(2.4, -4)
    -2

The second argument is optional, it's default value is 98.

::
    >>> add_integer(2)
    100

Non-numbers
===========

If either argument is a non-int and non-float, a TypeError is raised:

::
    >>> add_integer("not_int", 3)
    Traceback (most recent call last):
    TypeError: a must be an integer

::
    >>> add_integer(3, "not_int")
    Traceback (most recent call last):
    TypeError: b must be an integer

::
    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integer

::
    >>> add_integer(3.4, None)
    Traceback (most recent call last):
    TypeError: b must be an integer

If both arguments are non-integers and non-floats, a TypeError message is only
printed for the first argument.

::

    >>> add_integer("not_int", "not_float")
    Traceback (most recent call last):
    TypeError: a must be an integer

The function fails if infinity is provided.
::

    >>> add_integer(float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer
     

::

    >>> add_integer(2, float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

It also fails with NaN numbers.

::

    >>> add_integer(float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

::

    >>> add_integer(2, float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer
